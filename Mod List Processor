import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from tkinter import ttk  # Import ttk for themed widgets
import pyperclip
import requests
from bs4 import BeautifulSoup
import re
import time
import threading

def get_all_mod_ids_and_maps_from_workshop(workshop_id):
    url = f"https://steamcommunity.com/sharedfiles/filedetails/?id={workshop_id}"

    try:
        response = requests.get(url)
        response.raise_for_status()  # Check for HTTP errors
    except requests.RequestException as e:
        return [], []

    soup = BeautifulSoup(response.text, 'html.parser')
    description = soup.find('div', {'class': 'workshopItemDescription'})

    if description:
        text = description.text
        mod_id_pattern = re.compile(r'Mod ID:\s*([A-Za-z0-9_]+)', re.IGNORECASE)
        map_folder_pattern = re.compile(r'Map Folder:\s*([A-Za-z0-9_]+)', re.IGNORECASE)

        mod_ids = mod_id_pattern.findall(text)
        map_folders = map_folder_pattern.findall(text)

        return mod_ids, map_folders
    else:
        return [], []

def process_raw_input(raw_input):
    input_list = []
    lines = raw_input.strip().split("\n")
    for line in lines:
        name, workshop_id = line.rsplit("/", 1)
        input_list.append(workshop_id.strip())
    return input_list

def remove_duplicates_case_insensitive(seq):
    seen = set()
    result = []
    for item in seq:
        lower_item = item.lower()
        if lower_item not in seen and item != "Mod ID or Map Folder not found":
            seen.add(lower_item)
            result.append(item)
    return result

def browse_file():
    file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
    if file_path:
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                input_text.delete('1.0', tk.END)
                input_text.insert(tk.END, file.read())
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

def process_input():
    def process():
        try:
            raw_input = input_text.get('1.0', tk.END).strip()
            workshop_ids = process_raw_input(raw_input)

            all_mod_ids_in_order = []
            all_map_folders_in_order = []
            all_workshop_ids_in_order = []
            failed_workshop_ids = []

            progress_bar['value'] = 0
            progress_bar['maximum'] = len(workshop_ids)
            root.update_idletasks()

            for workshop_id in workshop_ids:
                mod_ids, map_folders = get_all_mod_ids_and_maps_from_workshop(workshop_id)

                if not mod_ids and not map_folders:
                    failed_workshop_ids.append(workshop_id)
                    continue

                if mod_ids:
                    all_mod_ids_in_order.append(";".join(remove_duplicates_case_insensitive(mod_ids)))

                if map_folders:
                    all_map_folders_in_order.append(";".join(remove_duplicates_case_insensitive(map_folders)))

                all_workshop_ids_in_order.append(workshop_id)

                progress_bar['value'] += 1
                root.update_idletasks()
                time.sleep(1)  # Sleep for 1 second between requests

            workshop_ids_string = ";".join(remove_duplicates_case_insensitive(all_workshop_ids_in_order))
            mod_ids_string = ";".join(remove_duplicates_case_insensitive(all_mod_ids_in_order))
            map_folders_string = ";".join(remove_duplicates_case_insensitive(all_map_folders_in_order))
            failed_ids_string = ";".join(failed_workshop_ids)

            output_workshop_ids.config(state=tk.NORMAL)
            output_workshop_ids.delete('1.0', tk.END)
            output_workshop_ids.insert(tk.END, workshop_ids_string)
            output_workshop_ids.config(state=tk.DISABLED)

            output_mod_ids.config(state=tk.NORMAL)
            output_mod_ids.delete('1.0', tk.END)
            output_mod_ids.insert(tk.END, mod_ids_string)
            output_mod_ids.config(state=tk.DISABLED)

            output_map_folders.config(state=tk.NORMAL)
            output_map_folders.delete('1.0', tk.END)
            output_map_folders.insert(tk.END, map_folders_string)
            output_map_folders.config(state=tk.DISABLED)

            output_failed_ids.config(state=tk.NORMAL)
            output_failed_ids.delete('1.0', tk.END)
            output_failed_ids.insert(tk.END, failed_ids_string)
            output_failed_ids.config(state=tk.DISABLED)

        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

    # Run processing in a separate thread
    threading.Thread(target=process, daemon=True).start()

def paste_from_clipboard():
    try:
        clipboard_text = pyperclip.paste()
        input_text.delete('1.0', tk.END)
        input_text.insert(tk.END, clipboard_text)
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while pasting from clipboard: {e}")

def copy_to_clipboard(output_widget):
    try:
        output_text = output_widget.get('1.0', tk.END).strip()
        pyperclip.copy(output_text)
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred while copying to clipboard: {e}")

root = tk.Tk()
root.title("Mod List Processor")

frame = tk.Frame(root)
frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

input_label = tk.Label(frame, text="Input Mod List:")
input_label.pack(anchor=tk.W)

input_text = scrolledtext.ScrolledText(frame, height=10, width=50)
input_text.pack()

paste_button = tk.Button(frame, text="Paste from Clipboard", command=paste_from_clipboard)
paste_button.pack(pady=5)

browse_button = tk.Button(frame, text="Browse for File", command=browse_file)
browse_button.pack(pady=5)

process_button = tk.Button(frame, text="Process", command=process_input)
process_button.pack(pady=10)

progress_bar = ttk.Progressbar(frame, orient=tk.HORIZONTAL, length=400, mode='determinate')
progress_bar.pack(pady=10)

output_frame = tk.Frame(root)
output_frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

output_label_workshop_ids = tk.Label(output_frame, text="Workshop IDs:")
output_label_workshop_ids.pack(anchor=tk.W)
output_workshop_ids = scrolledtext.ScrolledText(output_frame, height=5, width=60, state=tk.DISABLED)
output_workshop_ids.pack()

copy_button_workshop_ids = tk.Button(output_frame, text="Copy to Clipboard", command=lambda: copy_to_clipboard(output_workshop_ids))
copy_button_workshop_ids.pack(pady=5)

output_label_mod_ids = tk.Label(output_frame, text="Mod IDs:")
output_label_mod_ids.pack(anchor=tk.W)
output_mod_ids = scrolledtext.ScrolledText(output_frame, height=5, width=60, state=tk.DISABLED)
output_mod_ids.pack()

copy_button_mod_ids = tk.Button(output_frame, text="Copy to Clipboard", command=lambda: copy_to_clipboard(output_mod_ids))
copy_button_mod_ids.pack(pady=5)

output_label_map_folders = tk.Label(output_frame, text="Map Folders:")
output_label_map_folders.pack(anchor=tk.W)
output_map_folders = scrolledtext.ScrolledText(output_frame, height=5, width=60, state=tk.DISABLED)
output_map_folders.pack()

copy_button_map_folders = tk.Button(output_frame, text="Copy to Clipboard", command=lambda: copy_to_clipboard(output_map_folders))
copy_button_map_folders.pack(pady=5)

output_label_failed_ids = tk.Label(output_frame, text="Failed Workshop IDs:")
output_label_failed_ids.pack(anchor=tk.W)
output_failed_ids = scrolledtext.ScrolledText(output_frame, height=5, width=60, state=tk.DISABLED)
output_failed_ids.pack()

copy_button_failed_ids = tk.Button(output_frame, text="Copy to Clipboard", command=lambda: copy_to_clipboard(output_failed_ids))
copy_button_failed_ids.pack(pady=5)

root.mainloop()
